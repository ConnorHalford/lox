using System;
using System.Collections.Generic;
using System.IO;

public class GenerateAST
{
	public static int Main(string[] args)
	{
		int numArgs = args == null ? 0 : args.Length;
		if (numArgs != 1)
		{
			Console.WriteLine("Usage: generate_ast <output directory>");
			return -1;
		}

		string outputDir = args[0];
		DefineAST(outputDir, "Expr", new List<string>() {
				"Binary		: Expr left, Token operation, Expr right",
				"Grouping	: Expr expression",
				"Literal	: object value",
				"Unary		: Token operation, Expr right"
			});

		return 0;
	}

	private static void DefineAST(string outputDir, string baseName, List<string> types)
	{
		string path = $"{outputDir}/{baseName}.cs";
		using (StreamWriter sw = new StreamWriter(path))
		{
			sw.WriteLine("using System.Collections.Generic;");
			sw.WriteLine();
			sw.WriteLine("// NOTE: This file is automatically generated by the GenerateAST tool");
			sw.WriteLine($"public abstract class {baseName}");
			sw.WriteLine("{");

			// The AST classes
			int numTypes = types.Count;
			for (int i = 0; i < numTypes; ++i)
			{
				if (i > 0)
				{
					sw.WriteLine();
				}

				string type = types[i];
				string[] parts = type.Split(':', StringSplitOptions.TrimEntries);
				string className = parts[0];
				string fields = parts[1];
				DefineType(sw, baseName, className, fields);
			}

			sw.WriteLine("}");
		}
	}

	private static void DefineType(StreamWriter sw, string baseName, string className, string fieldList)
	{
		sw.WriteLine($"	public class {className} : {baseName}");
		sw.WriteLine("	{");

		// Constructor
		sw.WriteLine($"		public {className}({fieldList})");
		sw.WriteLine("		{");

		// Assign parameters to fields
		string[] fields = fieldList.Split(',', StringSplitOptions.TrimEntries);
		int numFields = fields.Length;
		for (int i = 0; i < numFields; ++i)
		{
			string field = fields[i];
			string name = field.Split(' ')[1];
			sw.WriteLine($"			this.{name} = {name};");
		}

		sw.WriteLine("		}");
		sw.WriteLine();

		// Define fields
		for (int i = 0; i < numFields; ++i)
		{
			sw.WriteLine($"		public {fields[i]};");
		}

		sw.WriteLine("	}");
	}
}
