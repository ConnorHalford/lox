using System.Collections.Generic;

// NOTE: This file is automatically generated by the GenerateAST tool
public abstract class Stmt
{
	public interface Visitor<T>
	{
		T VisitBlockStmt(Block stmt);
		T VisitExpressionStmt(Expression stmt);
		T VisitFunctionStmt(Function stmt);
		T VisitIfStmt(If stmt);
		T VisitVarStmt(Var stmt);
		T VisitPrintStmt(Print stmt);
		T VisitReturnStmt(Return stmt);
		T VisitWhileStmt(While stmt);
	}

	public class Block : Stmt
	{
		public Block(List<Stmt> statements)
		{
			this.Statements = statements;
		}

		public override T Accept<T>(Visitor<T> visitor)
		{
			return visitor.VisitBlockStmt(this);
		}

		public List<Stmt> Statements;
	}

	public class Expression : Stmt
	{
		public Expression(Expr expr)
		{
			this.Expr = expr;
		}

		public override T Accept<T>(Visitor<T> visitor)
		{
			return visitor.VisitExpressionStmt(this);
		}

		public Expr Expr;
	}

	public class Function : Stmt
	{
		public Function(Token name, List<Token> parameters, List<Stmt> body)
		{
			this.Name = name;
			this.Parameters = parameters;
			this.Body = body;
		}

		public override T Accept<T>(Visitor<T> visitor)
		{
			return visitor.VisitFunctionStmt(this);
		}

		public Token Name;
		public List<Token> Parameters;
		public List<Stmt> Body;
	}

	public class If : Stmt
	{
		public If(Expr condition, Stmt thenBranch, Stmt elseBranch)
		{
			this.Condition = condition;
			this.ThenBranch = thenBranch;
			this.ElseBranch = elseBranch;
		}

		public override T Accept<T>(Visitor<T> visitor)
		{
			return visitor.VisitIfStmt(this);
		}

		public Expr Condition;
		public Stmt ThenBranch;
		public Stmt ElseBranch;
	}

	public class Var : Stmt
	{
		public Var(Token name, Expr initializer)
		{
			this.Name = name;
			this.Initializer = initializer;
		}

		public override T Accept<T>(Visitor<T> visitor)
		{
			return visitor.VisitVarStmt(this);
		}

		public Token Name;
		public Expr Initializer;
	}

	public class Print : Stmt
	{
		public Print(Expr expr)
		{
			this.Expr = expr;
		}

		public override T Accept<T>(Visitor<T> visitor)
		{
			return visitor.VisitPrintStmt(this);
		}

		public Expr Expr;
	}

	public class Return : Stmt
	{
		public Return(Token keyword, Expr value)
		{
			this.Keyword = keyword;
			this.Value = value;
		}

		public override T Accept<T>(Visitor<T> visitor)
		{
			return visitor.VisitReturnStmt(this);
		}

		public Token Keyword;
		public Expr Value;
	}

	public class While : Stmt
	{
		public While(Expr condition, Stmt body)
		{
			this.Condition = condition;
			this.Body = body;
		}

		public override T Accept<T>(Visitor<T> visitor)
		{
			return visitor.VisitWhileStmt(this);
		}

		public Expr Condition;
		public Stmt Body;
	}

	public abstract T Accept<T>(Visitor<T> visitor);
}
